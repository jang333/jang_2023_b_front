JAVA 와 JAVAScript 다르다.
자바스크립트로 할수 있는것들
	1. 웹 클라이언트( 서비스제공받는 ) [ HTML,CSS,JS ] 
	------------ 2009년 이후 node.js --------------
	2. 웹 서버( 서비스제공하는 ) [ node.js ] VS JAVA(spring)
	3. 모바일  [ react native ]
	4. 데스크톱 애플리케이션[ NW.js ] vs JAVA(spring)
	5. 데이터베이스 관리[ NOSQL ] vs SQL

- 텍스트 에디터
	프론트엔드 	: VScode , 아톰 등등 
	백엔드 		: 이클립스 , 인텔리제이 등등 

- 브라우저 [ 클라이언트 입장 ]
	크롬 , 엣지 , 사파리 등등
    
-기본용어
    부호            : (모스부호[짦은신호 또는 긴신호]->전기상태 [있다 또는 없다] -> 2진수{0또는1}) 
    코드            : 정보를 다른 형태로 변환하는 규칙[문법/도구]
                    [java[규칙], html[규칙 <>], css[규칙 식별자{}], js, python, C#]
    표현식          : 하나 이상의 값/정보 으로 표현할 수 있는 코드를 의미
    문장            : 표현식 한개이상 모인 것(명령문)
    프로그램        : 문장이 모인 것 (명령문의 집합)
    프로세스        : 현재 실행중인 프로그램(스케줄링/스래드)
    응용프로그램    : 사용자가 사용할 수 있도록 만든 프로그램(=애플리케이션)
    웹 애플리케이션 : 웹에서 사용하는 프로그램


    부호 -> 코드 -> 표현식 -> 문장 -> 프로그램                  ->  웹 애플리케이션 (프로세스)
                                                사용처에 따라  ->  앱 애플리케이션 (프로세스)
                                                              ->  데스크탑 애플리케이션 (프로세스)


    개발자/사람                                     컴퓨터 
    <div>           ----------명령어------------> [번역] 010101010101010

    박스모델            <----------- 실행결과--------- 


    console.log("안녕") ---------명령어-----------> [번역] 010101011011111

    안녕                <----------- 실행결과--------- 

- 키워드 : 언어들이 미리 만든 (기능이 들어간) 단어들
    !! : 키워드와 동일하게 이름을 정하지 말자! [중복되니까.]

- 식별자 : 어떠한 변수/함수/명령 등을 식별하기 위한 이름
    HTML/CSS : id, class, <마크업>
    JS : 변수/함수/클래스 등등
    1. 키워드 사용불가 2. 숫자시작 불가 3. 특수문자 _ , $만 가능 4. 공백 불가
    2. 영어권작(카멜표기법) , 의미있는 이름

- 주석 : 코드 설명
    HTML : <!--주석-->
    CSS : /*주석*/
    JS : 1. 한줄주석 : //주석
         2. 여러줄 주석 : /*주석*/

-HTML에서 JAVAScript 적용하는 방법
    -JS파일만 가지고 실행 x, 브라우저 HTTP[문서 교환 규칙]
    HTML(뼈), CSS(옷), JS(행위)
    1.<script> 마크업을 이용한 스크립트 작성
    2.<head> 또는 <body> 가장하단에 <script src=" .js(파일경로)"> 마크업에 .js파일을 불러오기

1. 입출력방법[*2,6]
    1.alert("출력하고 싶은 문구")                           : 경고창(확인버튼) 출력 함수
    2.console.log("출력하고 싶은 문구")                     : console(f12개발자도구) 출력 함수
    3.confirm("출력하고 싶은 문구")                         : 확인창 (확인=true/취소=false) 버튼 출력 함수
    4.prompt("출력하고 싶은 문구")                          : 입력창(입력상자[input] , 확인=입력값반환 / 취소=false) 입력 함수
    5.document.write("HTML에 출력하고 싶은 문구")           :  HTML 출력 함수
    6.document.특정식별자.html="HTML에 출력하고 싶은 문구"   : 특정 요소/마크업에 출력하는 함수

2. 기본 자료형
    -자료 : 프로그램이 처리할 수 있는 모든 것
    -자료형 : 자료 형태/모양/폼 따라 나눠 놓은 것 [메모리를 효율적을 쓰기 위해]
        1.숫자(number) 2.문자열(string) 3.불(boolean) 4.undefined

            [숫자]
            1.숫자와 문자열 구분
                273 vs "273" 다르다
            
            [불]
            1.true 혹은 false 

            [문자열]
            1.문자열 표한방법 : '문자열' 또는 "문자열"
                주의할점 :  1. '문자열" 불가능
                           2. " ' ' " 가능
                           3. ' " " ' 가능

            2.이스케이스프/제어 문자
                1. \n : 줄바꿈
                2. \t : 들여쓰기(탭기능)
                3. \\ : 백슬래쉬(\) 출력
                그외 \",\' 연산자 출력시

            3.문자열 연산자
                문자열+문자열 : 문자열 연결 연산자 ["문자열"+"문자열"]
                    - ` 백틱 권장
                문자열[인덱스번호] : 문자열에서 인덱스(순서)번째 문자 추출
                    '안 녕 하 세 요'
                    [0][1][2][3][4]
                    '안녕하세요'[0]     : 해당 문자열내 0번째 문자 => 안

                문자열.length : 문자열내 문자 개수
                    '안녕하세요'.length  : 해당 문자열내 문자 개수 => 5

3. 연산자[연산/계산/논리 시 사용되는 특수문자]
    1. 산술 연산자 : 결과값[숫자형] 출력
        + 더하기  - 뺴기  * 곱하기  / 나누기  % 나머지
        [몫 구하기 parseInt(실수) : 정수로 변환해주는 함수]

    2. 연결 연산자 : + 연결연산자 [반환값 = 문자열]
        숫자+숫자 [더하기]
        숫자+'문자열' [연결]
        '문자열'+'문자열'[연결]
        '문자열' + 변수 [연결]

    3. 비교연산자 : 비교 후 true/참 혹은 false/거짓 반환 [반환값 = true 또는 false]
        > 초과                  < 미만
        >== 이상                ==< 이하
        == 같다[데이터만 비교]   ===같다[데이터/자료형 강력비교]
        != 같지않다             !==같지않다

    4. 관계연산자 : 주로 비교연산자를 2개이상 사용할때 사용 후 true/참 혹은 false/거짓 반환
        && : 이면서 면서 이고 모두 그리고 [and조건]       초등학생이 사탕이면서 초콜렛 먹는다.[모두 참이면 참]
                                                        초등학생 == 사탕 && 초등학생 == 초콜렛
        || : 이거나 거나 또는 하나라도 [or조건]           초등학생이 사탕이거나 초콜렛 먹는다.[하나라도 참이면 참]
                                                        초등학생 == 사탕 || 초등학생 == 초콜렛
        !  : 반대 부정 [not조건]                         초등학생이 사탕이 뺴고 먹는다.[참 -> 거짓 / 거짓 -> 참]
                                                        !초등학생 == 사탕

    5. 증감연산자 : 1증가 혹은 1감소
        ++ : 1증가  [++변수 : 선위증가, 변수++ : 후위증가]
        -- : 1감소  [--변수 : 선위감소, 변수-- : 후위감소]

    6. 대입연산자 : 오른쪽 데이터를 왼쪽에 넣어주기/대입
        =   : 대입    [변수=10;   10이라는 데이터를 변수에 넣어주기/대입/저장]
        +=  : 오른쪽 데이터를 왼쪽에 더한 후에 왼쪽에 대입
        -=, *=, /=, %= 등.  

        *예) 특정 변수에 1더하기
        let value = 1;
            1.value value+2
            2.value += 1
            3.value++;
            4.++value

    7. 삼항연산자 : 항이 3개
        조건 ? 참 : 거짓
            - 조건 : 비교/관계 연결연산자       결과를 true 또는 false를 같는 것
            - 참 : true 대신 들어갈 실행코드
            - 거짓 : false 대신 들어갈 실행코드     -선언부 x 

-연산 관련 함수들
    1. parseInt()   : 정수로 변환*
    2. typeof()     : 자료형 검사*
    3. number()     : 숫자자료형으로 변환 함수
    4. String()     : 문자자료형으로 변환 함수
    5. Boolean()    : 불 자료형으로 변환 함수
    6. isNaN( 자료 ): 만약에 자료가 문자이면 true 숫자이면 falss
            
-문자열 관련된 함수들
    1. 문자열.length                   : 문자열 길이
    2. 문자열.split("분리기준문자")     : 분리기준문자 기준으로 분리 후 분리된 자료들을 배열로 반환
        "강호동/유재석/신동엽"  :  자료1개
            "강호동/유재석/신동엽".split("/")      :   / 기준으로 분리
        "강호동"  "유재석"   "신동엽"   : 자료3개 
            [ "강호동" , "유재석"  , "신동엽" ] : 자료1개( 배열 자료1개 )

-*****템플릿 문자열*****
    ` 백틱을 이용한 문자열과 데이터 표현
    1. 전체를 ` 백틱으로 감싼다.
    2. 데이터를 표현할 위치에 ${데이터}

-상수와 변수
    : 1개의 데이터를 저장하여 반복사용 목적
    : JS, JAVA, PYTHON, C 언어 등 프로그래밍 코드 언어들은 개발자를 위해서 하드웨어 값[자료]을 저장할 수 있도록 만들어진 문법
        -html,css 없음

                상수/변수 : 1개의 자료[ 숫자,문자열,불 ] 를 저장/가지고 있는 상자

        value1
    |           |                               RAM[ 주기억장치 ]
    |   "안녕"  |       '안녕' 저장해
    |           |  ---------------------->   "안녕" ------> 유니코드 010101010101111
    |___________|

        value2
    |           |                               RAM[ 주기억장치 ]
    |   "안녕"  |       '안녕' 저장해
    |           |  ---------------------->   "안녕" ------> 유니코드 010101010101111
    |___________|


    메모리 : 주기억장치 [현재실행중인 메모리 - ram메모리], 보조기억장치[영구저장용 메모리 - ssd, hdd,c;]
        -컴퓨터가 데이터를 저장하는 공간

    -개발자가 하드웨어에 직접적으로 메모리에 저장할 수 없다.[소프트웨어는 하드웨어 사용권한이 없음]

    상수 : 항상 같은 수
        - 한번 값을 넣으면 수정 불가
        - const : 상수를 선언하는 의미를 담고 있는 키워드

    변수 : 변할 수 있는 수
        - 값을 계속 변경 할 수 있음
        - var 또는 let : 변수를 선언하는 의미를 담고 있는 키워드

    변수/상수 만들기
        1.키워드 : const, let
        2.식별이름 : 변수명/상수명 정하기 [중복없이]
        3.= : 대입
        4. 초기값

    -변수/상수 값 호출
        -변수명 또는 상수명 작성하면 변수 또는 상수 내 값 반환
        변수명/상수명

    -변수/상수 값 변경 [상수는 불가능]
        변수명 = 새로운값

    -변수/상수 값 연산
        변수명/상수명 + 10



------------ 간단한 컴퓨터 하드웨어 소개 ------------------- 
 10000 [ C드라이브 : 실행 하고 끝 ]
 let a = 10000 [ c드라이브 : 실행 하고 끝  + 프로그램 종료될때까지 저장. ]

                                        
                                        -컴퓨터 본체 

                                        --주 기억장치  8 G [ RAM ]
                                            |    
                                            |    필요한 데이터[ 현재 선택한 캐릭터 ] 주기억장치로 이동
    1.게임설치/다운로드                       |
        롤                              --보조 기억장치 500G 1T [ SSD  , C , USB , 비휘발성 : 본인 직접 삭제하지 않는 이상 영구저장 ]
                
                    ------1------>                  50GB
                     코드 다운로드

    2.게임실행[ 로그인 / 캐릭터선택 -> 게임중 ]


- 제어문(조건문)
    - 주어진 조건에 만족 여부에 따라 선택적으로 실행하고자 할때.
    - 형태
        1. 참일때만
            if(조건){ }
        2. 참/거짓
            if(조건){ }
            else{ }
        3. 중첩
            if(조건){
                if(조건)
                else{ }
            }else{
                if(조건){ }
                esle{ }
            }
        4. 다수조건 : {} 한번만 실행
            if(조건1){ }
            else if(조건2){ }
            else if(조건3){ }
            else if(조건4){ }
            else{ }
                //조건 만족에 따라 {} 한번만 실행
            vs---------------------
                //조건 만족에 따라 {} 여러번 실행
            if(조건1){ }
            if(조건2){ }
            if(조건3){ }
            if(조건4){ }
        
    2.switch
    -1.형태
        -default, break
        -1.형태
            switch(자료/계산식){
                case 조건 A : 실행코드; break;
                default : break;
            }

- 제어문(반복문)
    1. for문*
        for(초기값 ; 조건문 ; 증감식){
            실행코드
        }

    2. 실행순서
        1.초기값
        2.조건문
        [참이면] 3.실행코드 4.증감식 2.조건문
        [거짓이면] 종료             [참이면] 3.시행코드 4.증감식 2.조건문
                                                               [거짓이면] 종료
     
-키워드
    break : switch, 반복문(for, while) { } 탈출/종료
    return : 함수 { } 탈출/종료

-배열
    -여러 자료를 묶어서 활용할 수 있는 특수한 자료
    -형태
        -let 변수/상수명 = [ ] 
    -여러 개의 변수를 한번에 선언해 다룰 수 있는 자료형
        -[ ] 사용
        -내부 값을 ,쉼표로 구분
        -내부 값을 요소[element]
    1.배열 선언
        -let 변수/상수명 = [요소, 요소, 요소]
            -요소란? 배열내 들어간 자료 (1.숫자 2.불 3.문자열 4.배열 5.함수 6.객체)

    2.배열 요소에 접근
        -인덱스란? 배열내 요소들이 저장된 순서번호
            0부터 시작 ()
        -형태
            변수명[인덱스]

    3.배열 요소 개수 확인
        배열.length

    4.배열 요소 추가하기
        -마지막 삽입
        배열.push(추가할요소);
        -특정 위치에 삽입
        배열.splice(중간삽입할 요소의 인덱스 위치, 0, 추가할 요소의 값)

    5.배열 요소 제거하기
        -인덱스 이용한 삭제
        배열.splice( 제거할 요소의 인덱스, 제거할 요소의 개수)
            -배열.splice(3,1) : 3번 인덱스부터 1개 삭제
            -배열.splice(3,3) : 3번 인덱스부터 3개 삭제[3 4 5]
            -배열.splice(0)   : 배열 요소 전체 삭체 [0~끝까지]
        -값을 이용한 삭제
            배열.splice(배열.indexOf(값),1)
            if(배열.indexOf(값) >= 0){ }
            만약에 배열내 값이 존재하면

    6.배열 내 요소 찾기
        배열.indexOf(값);
            -배열 내 동일한 값이 있으면 인데스번호 반환 / 없으면 -1

- 지역변수
    - 선언된 위치{ }에 따라 변수 사용 여부 판단.
        - 1. { }안에서 선언된 변수/상수는 해당 { } 밖에서 사용이 불가능.
        - 2. { }안에서 선언된 변수/상수는 해당 { } 안에 하위 { } 안에는 들어갈 수 있다.

- DOM 객체
    1. document      : HTML      -(.js는 항상 HTML 안에 존재한다.)
        -제공하는 함수
        1. document.querySelector('선택자')
            - 선택자
            1. '#id명' , '.class명' , '마크업' 등
            
            - 속성
                .value;                  입력태그 : input , select , textarea 등
                .innerHTML;              입력태그 외 : div , span , table , ul , h 등

    - HTML에서 input 가져오기.
    1. HTML 전체를 호출한다.
        const htmlObj = document;
    2. HTML 중에서 input 1개 호출
        const inputObj = document.querySelector('input');
    3. HTML 중에서 input의 입력된 value 호출
        const inputValue = document.querySelector('input').value;